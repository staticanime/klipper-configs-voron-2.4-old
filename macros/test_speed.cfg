[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(50)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro TEST_ACCEL_X]
gcode:
  {% set steps = params.STEPS|default(100)|int %}
  {% set speed = params.VELOCITY|default(1000)|float * 60 %}
  
  {% set inset = 50.0|float %} 
  {% set accel = 10000|int %} 
  {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
  {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
  {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
  {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
  
  SAVE_GCODE_STATE NAME=accelltest_state
  
  SET_VELOCITY_LIMIT ACCEL={accel} 
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
  G28
  G1 Z{inset + 10}
  G1 X{minX} Y{minY} F{speed} 
  
  {% for INTERVAL in range(steps) %}
      {% set eff = accel + (INTERVAL * 1000) %} 
      SET_VELOCITY_LIMIT ACCEL={eff} 
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
      G1 X{minX} Y{minY} F{speed}  
      G1 X{maxX} Y{maxY} F{speed}  
  
  {% endfor %}    
  
  RESTORE_GCODE_STATE NAME=accelltest_state 

[gcode_macro TEST_ACCEL_Y]
gcode:
  {% set steps = params.STEPS|default(100)|int %}
  {% set speed = params.VELOCITY|default(1000)|float * 60 %}
  
  {% set inset = 50.0|float %}
  {% set accel = 10000|int %}
  {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
  {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
  {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
  {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}
  
  SAVE_GCODE_STATE NAME=accelltest_state
  
  SET_VELOCITY_LIMIT ACCEL={accel} 
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
  G28
  G1 Z{inset + 10}
  G1 X{minX} Y{minY} F{speed} 
  
  {% for INTERVAL in range(steps) %}
      {% set eff = accel + (INTERVAL * 1000) %} 
      SET_VELOCITY_LIMIT ACCEL={eff} 
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
      G1 X{maxX} Y{minY} F{speed}  
      G1 X{minX} Y{maxY} F{speed}  
  
  {% endfor %}    
  
  RESTORE_GCODE_STATE NAME=accelltest_state 